#! /usr/bin/python

# Author: Jesse Millwood

import re
import sys
import getopt
'''
Takes the input from a file and converts it to the machine code
for a simple micro-controller implementation in Verilog on a Xilinx FPGA
Python Version: 2.7
'''
# Instruction   ->  Encoding
#----------------|-------------------
# Load M,R 		-> 000000pr, mmmmmmmm
# STOR R,M 		-> 000001pr, mmmmmmmm
# ADD R 		-> 1000000r 
# SUB R 		-> 1001000r
# LSL R 		-> 1010000r 
# LSR R 		-> 1011000r 
# XOR R 		-> 1100000r
# COM R 		-> 1101000r
# NEG R 		-> 1110000r 
# CLR R 		-> 1111000r
# OUT R,P 		-> 000010ir
# IN P,R 		-> 000011ir
# BCDO R        -> 0100000r
# DEB i,R       -> 001000ir
# BZ M          -> 001100p0, mmmmmmmm

def createCOEfile(out_filename, memory_vals, lines):
	'''
	Creates a coe file containing comments and memory values
	'''
	out_filename = out_filename + '.coe'
	with open(out_filename, 'w') as f:
		f.write('; Coefficient file for initializing a 512x8 RAM\n') 
		f.write('; Filename: {}\n'.format(out_filename))
		f.write(';\n')
		f.write(';\n')
		f.write(';Instructions:\n')
		for instruction in lines:
			f.write(';{}\n'.format(instruction))
		f.write('memory_initialization_radix = 2;\n')
		f.write('memory_initialization_vector =\n')
		for mem_address in range(0,512):
			# Start writing the memory values to the proper
			# memory locations
			if memory_vals.has_key(mem_address):
				f.write(str(memory_vals[mem_address])+'\n')
				#print'Address:{} Value:{}'.format(mem_address, memory_vals[mem_address])
			else:
				f.write('00000000\n')
		f.write(';')


def createDATfile(out_filename, memory_vals):
	'''
	Creates a dat file containing just the values of memory at 
	their locations
	'''
	out_filename = out_filename + '.dat'
	with open(out_filename, 'w') as f:
		for mem_address in range(0,512):
			# Start writing the memory values to the proper
			# memory locations
			if memory_vals.has_key(mem_address):
				f.write(str(memory_vals[mem_address])+'\n')
				#print'Address:{} Value:{}'.format(mem_address, memory_vals[mem_address])
			else:
				f.write('00000000\n')
		f.write(';')


def readfile(in_path, out_filename, type):
	'''
	Reads every line in the file and saves it to a list
	'''
	with open(in_path, 'rb') as filehandle:
		lines = [line.rstrip() for line in filehandle]
	memory_vals = getMemoryValues(lines, out_filename)

	# strip any file indicators from out_filename
	if '.' in out_filename:
		out_filename = out_filename.replace(out_filename[out_filename.index('.'):],'')

	if 'debug' in type:
		# Some Things for debugging
		sortedList = [x for x in memory_vals.iteritems()]
		sortedList.sort(key=lambda x:x[0])
		for item in sortedList:
			print 'Address: {} :: Value: {}'.format(item[0],item[1])
		sys.exit(0)
	elif 'coe' in type:
		# produce a coe type file
		createCOEfile(out_filename, memory_vals, lines)
	elif 'dat' in type:
		# produce a dat file, which is just barebones and no comments
		createDATfile(out_filename, memory_vals)
	elif 'both' in type:
		# produce both dat file and coe file
		createCOEfile(out_filename, memory_vals, lines)
		createDATfile(out_filename, memory_vals)




def getMemoryValues(instructions, filename):
	'''
	Parses the lines in the Instruction file and stores the
	contents of the memory address with the address in a 
	dictionary. This dictionary is returned
	'''
	# Create empty dictionary
	memorydict = {}
	# Create variables for keeping track of memory blocks
	offset = 0
	increment = 1
	lineNumber = 0

	for line in instructions:
		lineNumber+=1
		line = line.upper()
		tokens = re.split(',|:|;| ',line)

		if tokens[0].isdigit():
			# Store the initialized memory 
			# value  and contents to be set after the op
			# codes are finished
			tokens[0] = int(tokens[0])
			tokens[1] = int(tokens[1])
			if tokens[0] <= 511 and tokens[1] <= 511:
				memorydict[tokens[0]] = bin(tokens[1])[2:].zfill(8)

		elif 'BEGIN' in tokens:
			try:
				offset = int(tokens[1])
			except ValueError:
				print 'Error at Line {}'.format(lineNumber)
				print 'BEGIN location is not a number' 
				sys.exit(1)
			increment = 0

		elif 'LOAD' in tokens:
			# convert memory parameter to an integer
			try:
				tokens[1] = int(tokens[1])
			except ValueError:
				print 'Error at Line {}'.format(lineNumber)
				print 'LOAD memory location is not a number' 
				sys.exit(1)
			if 'A' not in tokens[2] and 'B' not in tokens[2]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[2])
				sys.exit(1)
			else:
				# Set bit representing the register
				r = '0' if 'A' in tokens[2] else '1'
				# Set bit representing the page and 
				p = '0' if tokens[1]<=255 else '1'
		 	# Put together instructions
		 	instruction1 = '000000'+p+r
		 	# The least significant bits of the desired address are stored
		 	# in the second instruction. The cpu appends the page bit
		 	# to the address when it is put on the address bus
		 	instruction2 = bin(tokens[1])[2:].zfill(8)[-8:]
		 	# Store in memorydict
		 	memorydict[offset+0] = instruction1
		 	memorydict[offset+1] = instruction2
			increment = 2

		elif 'STOR' in tokens:
			try:
				tokens[2] = int(tokens[2])
			except ValueError:
				print 'Error at Line {}'.format(lineNumber)
				print 'STOR memory location is not a number' 
				sys.exit(1)
			if 'A' not in tokens[1] and 'B' not in tokens[1]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[1])
				sys.exit(1)
			else:
				# Set bit representing the register
				r = '0' if 'A' in tokens[1] else '1'
				# Set bit representing the page and 
				p = '0' if tokens[2]<=255 else '1'
		 	# Put together instructions
		 	instruction1 = '000000' + p + r
		 	instruction2 = bin(tokens[2])[2:].zfill(8)[-8]
			# Store in memorydict
			memorydict[offset+0] = instruction1
		 	memorydict[offset+1] = instruction2
			increment = 2

		elif 'ADD' in tokens:
			# Set bit representing the register
			if 'A' not in tokens[1] and 'B' not in tokens[1]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[1])
				sys.exit(1)
			else:
				# Set bit representing the register
				r = '0' if 'A' in tokens[1] else '1'
			instruction1 = '1000000' + r
			memorydict[offset+0] = instruction1
			increment = 1
		elif 'SUB' in tokens:
			# Set bit representing the register
			if 'A' not in tokens[1] and 'B' not in tokens[1]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[1])
				sys.exit(1)
			else:
				# Set bit representing the register
				r = '0' if 'A' in tokens[1] else '1'
			instruction1 = '1001000' + r
			memorydict[offset+0] = instruction1
			increment = 1
		elif 'LSL' in tokens:
			# Set bit representing the register
			if 'A' not in tokens[1] and 'B' not in tokens[1]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[1])
				sys.exit(1)
			else:
				# Set bit representing the register
				r = '0' if 'A' in tokens[1] else '1'
			instruction1 = '1010000' + r
			memorydict[offset+0] = instruction1
			increment = 1
		elif 'LSR' in tokens:
			# Set bit representing the register
			if 'A' not in tokens[1] and 'B' not in tokens[1]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[1])
				sys.exit(1)
			else:
				# Set bit representing the register
				r = '0' if 'A' in tokens[1] else '1'
			instruction1 = '1011000' + r
			memorydict[offset+0] = instruction1
			increment = 1
		elif 'XOR' in tokens:
			# Set bit representing the register
			if 'A' not in tokens[1] and 'B' not in tokens[1]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[1])
				sys.exit(1)
			else:
				# Set bit representing the register
				r = '0' if 'A' in tokens[1] else '1'
			instruction1 = '1100000' + r
			memorydict[offset+0] = instruction1
			increment = 1
		elif 'COM' in tokens:
			# Set bit representing the register
			if 'A' not in tokens[1] and 'B' not in tokens[1]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[1])
				sys.exit(1)
			else:
				# Set bit representing the register
				r = '0' if 'A' in tokens[1] else '1'
			instruction1 = '1101000' + r
			memorydict[offset+0] = instruction1
			increment = 1
		elif 'NEG ' in tokens:
			# Set bit representing the register
			if 'A' not in tokens[1] and 'B' not in tokens[1]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[1])
				sys.exit(1)
			else:
				# Set bit representing the register
				r = '0' if 'A' in tokens[1] else '1'
			instruction1 = '1110000' + r
			memorydict[offset+0] = instruction1
			increment = 1
		elif 'CLR' in tokens:
			if 'A' not in tokens[1] and 'B' not in tokens[1]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[1])
				sys.exit(1)
			else:
				# Set bit representing the register
				r = '0' if 'A' in tokens[1] else '1'
			instruction1 = '1111000' + r
			memorydict[offset+0] = instruction1
			increment = 1
		elif 'OUT' in tokens:
			try:
				tokens[2] = int(tokens[2])
			except ValueError:
				print 'Error at Line {}'.format(lineNumber)
				print 'OUT source is not a number' 
				sys.exit(1)
			if 'A' not in tokens[1] and 'B' not in tokens[1]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[1])
				sys.exit(1)
			else:
				# Set bit representing the register
				r = '0' if 'A' in tokens[1] else '1'
				# Set bit representing the i bit
				i = '0' if tokens[2]==0 else '1'

			instruction1 = '000010' + i + r
			memorydict[offset+0] = instruction1
			increment = 1
		elif 'IN' in tokens and 'BEGIN' not in tokens:
			try:
				tokens[1] = int(tokens[1])
			except ValueError:
				print 'Error at Line {}'.format(lineNumber)
				print 'IN source is not a number' 
				sys.exit(1)
			if 'A' not in tokens[2] and 'B' not in tokens[2]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[2])
				sys.exit(1)
			else:
				# Set bit representing the register
				r = '0' if 'A' in tokens[2] else '1'
				# Set bit representing the i bit
				i = '0' if tokens[1]==0 else '1'
			instruction1 = '000011' + i + r
			memorydict[offset+0] = instruction1
			increment = 1
		elif 'BCDO ' in tokens:
			if 'A' not in tokens[1] and 'B' not in tokens[1]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[1])
				sys.exit(1)
			else :
				# Set bit representing the register
				r = '0' if 'A' in tokens[1] else '1'
			instruction1 = '0100000' + r
			memorydict[offset+0] = instruction1
			increment = 1
		elif 'DEB ' in tokens:
			try:
				tokens[1] = int(tokens[1])
			except ValueError:
				print 'Error at Line {}'.format(lineNumber)
				print 'IN source is not a number' 
				sys.exit(1)
			if 'A' not in tokens[2] and 'B' not in tokens[2]:
				print 'ERROR at Line {}'.format(lineNumber)
				print 'Unknown Register {}'.format(tokens[2])
				sys.exit(1)
			else:
				# Set bit representing the register
				r = '0' if 'A' in tokens[2] else '1'
				# Set bit representing the i bit
				i = '0' if tokens[1]==0 else '1'
			instruction1 = '001000' + i + r
			memorydict[offset+0] = instruction1
			increment = 1
		elif 'BZ ' in tokens:
			# Set page bit
			try:
				tokens[1] = int(tokens[1])
				p = '0' if tokens[1]<=255 else '1'
			except ValueError:
				print 'Error at Line {}'.format(lineNumber)
				print 'BZ argument is not a number' 
				sys.exit(1)

		 	instruction1 = '001100' + p +'0'
		 	instruction2 = bin(tokens[1])[1:].zfill(8)[-8:]
		 	memorydict[offset+0] = instruction1
		 	memorydict[offset+1] = instruction2
		 	increment = 2

		# Keep track of number of elements away from the 'BEGIN' Directive
		offset += increment
	return memorydict


def main(argv):
	# Default file names options
	inFILE = 'Instructions.dat'
	outFILE= 'Encoding'
	type = 'both'
	try:
		opts, args = getopt.getopt(argv, 'i:o:ht:',['inFILE','outFILE','help','type'])

	except getopt.GetoptError:
		print 'Nothing you entered was correct... try again bud'
		sys.exit(2)

	for opt, arg in opts:
		if opt in ('-i', '--inFILE'):
			inFILE = arg
		elif opt in ('-o','--outFILE'):
			outFILE = arg
		elif opt in ('-t', '--type'):
			type = arg
		elif opt in ('-h','--help'):
			print '*======================================================*'
			print '|                  Simple Assembler Help:              |'
			print '*======================================================*'
			print 'This program is meant to be a simple assembler that takes'
			print 'the input from a file and converts it to the machine code'
			print 'for a simple micro-controller implementation in Verilog '
			print 'on a Xilinx FPGA.'
			print 'Target Python Version: 2.7'
			print ''
			print 'Acceptable Arguments: '
			print '\t-t or --type '
			print '\t\tdefines the type of output file'
			print '\t\tchoices are coe or dat debug or both(default)'
			print ''
			print '\t-o or --outFILE'
			print '\t\tdefines the name of the output file'
			print '\t\tdefault is Encoding, which produces'
			print '\t\tEncoding.coe and Encoding.dat with'
			print '\t\tthe both switch activated'
			print ''
			print '\t-i or --inFILE'
			print '\t\tdefines the name of the input file'
			print '\t\tdefault is Instructions.dat'
			print ''
			print ' The Instructions implemented so far are listed bellow:'
			print ' Instruction   ->  Encoding'
			print '----------------|-------------------'
			print ' Load M,R 		-> 000000pr, mmmmmmmm'
			print ' STOR R,M 		-> 000001pr, mmmmmmmm'
			print ' ADD R 			-> 1000000r '
			print ' SUB R 			-> 1001000r'
			print ' LSL R 			-> 1010000r '
			print ' LSR R 			-> 1011000r '
			print ' XOR R 			-> 1100000r'
			print ' COM R 			-> 1101000r'
			print ' NEG R 			-> 1110000r '
			print ' CLR R 			-> 1111000r'
			print ' OUT R,P 		-> 000010ir'
			print ' IN P,R 		-> 000011ir'
			print ' BCDO R 		-> 0100000r'
			print ' DEB i,R 		-> 001000ir'
			print ' BZ M 			-> 001100p0, mmmmmmmm'
			print ''
			print ' Author: Jesse Millwood'
			print ' April 2014'
			sys.exit(0)


	

	readfile(inFILE, outFILE, type)
	print 'Successful Conversion'






if __name__ == '__main__':
	main(sys.argv[1:])